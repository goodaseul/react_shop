{"version":3,"file":"static/js/739.e975c3a5.chunk.js","mappings":"yKAIA,MAAMA,GAAQC,EAAAA,EAAAA,OAAK,WAMf,OADAC,QAAQC,IAAI,6BACLC,EAAAA,EAAAA,KAAA,OAAAC,SAAK,QAChB,IAqDA,EAjDaC,KAGT,IAAIC,GAAQC,EAAAA,EAAAA,KAAaD,GACdA,IAGPE,GAAWC,EAAAA,EAAAA,OAEVC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,GAEjC,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMV,SAAA,EACjBD,EAAAA,EAAAA,KAACJ,EAAK,CAACW,MAAOA,KACdP,EAAAA,EAAAA,KAAA,UAAQY,QAASA,IAAMJ,EAASD,EAAQ,GAAGN,SAAC,MAC3CE,EAAMU,KAAKC,KACXX,EAAMU,KAAKE,KACZf,EAAAA,EAAAA,KAAA,UAAQY,QAASA,IAAMP,GAASW,EAAAA,EAAAA,OAAaf,SAAC,8BAC9CS,EAAAA,EAAAA,MAAA,SAAAT,SAAA,EACID,EAAAA,EAAAA,KAAA,SAAAC,UACIS,EAAAA,EAAAA,MAAA,MAAAT,SAAA,EACID,EAAAA,EAAAA,KAAA,MAAAC,SAAI,OACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,wBACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,kBACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,mCAGZD,EAAAA,EAAAA,KAAA,SAAAC,SACKE,EAAMc,OAAOC,KAAI,CAACC,EAAMC,KAEjBV,EAAAA,EAAAA,MAAA,MAAAT,SAAA,EACID,EAAAA,EAAAA,KAAA,MAAAC,SAAKkB,EAAKE,MACVrB,EAAAA,EAAAA,KAAA,MAAAC,SAAKkB,EAAKL,QACVd,EAAAA,EAAAA,KAAA,MAAAC,SAAKkB,EAAKZ,SACVP,EAAAA,EAAAA,KAAA,MAAAC,UACID,EAAAA,EAAAA,KAAA,UAAQY,QAASA,IAAMP,GAASiB,EAAAA,EAAAA,IAASH,EAAKE,KAAKpB,SAAC,SAExDD,EAAAA,EAAAA,KAAA,MAAAC,UACID,EAAAA,EAAAA,KAAA,UAAQY,QAASA,IAAMP,GAASkB,EAAAA,EAAAA,IAASJ,EAAKE,KAAKpB,SAAC,UARnDmB,YAevB,C","sources":["components/Cart.js"],"sourcesContent":["import { memo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { changeNum } from \"./../store/userSlice\";\r\nimport { addCount, addMiues } from \"../store.js\";\r\nconst Child = memo(function () {\r\n    // 꼭 필요한 무거울 때만사용하기 |  재렌더링\r\n    // props가 변할때만 재렌더링\r\n    // 기존 props와 신규 props를 매번 비교 > 길고 복잡하면 손해\r\n\r\n    console.log(\"재렌더링\");\r\n    return <div>MEMO</div>;\r\n});\r\n\r\n// useMemo > useEffect 와 비슷하지만, html이 렌더링 되고있을 때 진행됨\r\n\r\nconst Cart = () => {\r\n    //redux store 가져와줌\r\n\r\n    let state = useSelector((state) => {\r\n        return state;\r\n    });\r\n    // store js 로 요청보내주는 함수\r\n    let dispatch = useDispatch();\r\n\r\n    let [count, setCount] = useState(0);\r\n\r\n    return (\r\n        <div className=\"cart\">\r\n            <Child count={count}></Child>\r\n            <button onClick={() => setCount(count + 2)}>+</button>\r\n            {state.user.name}\r\n            {state.user.age}\r\n            <button onClick={() => dispatch(changeNum())}>변경예시</button>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>상품명</th>\r\n                        <th>수량</th>\r\n                        <th>변경하기</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {state.stocks.map((item, index) => {\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td>{item.id}</td>\r\n                                <td>{item.name}</td>\r\n                                <td>{item.count}</td>\r\n                                <td>\r\n                                    <button onClick={() => dispatch(addCount(item.id))}>+</button>\r\n                                </td>\r\n                                <td>\r\n                                    <button onClick={() => dispatch(addMiues(item.id))}>-</button>\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;\r\n"],"names":["Child","memo","console","log","_jsx","children","Cart","state","useSelector","dispatch","useDispatch","count","setCount","useState","_jsxs","className","onClick","user","name","age","changeNum","stocks","map","item","index","id","addCount","addMiues"],"sourceRoot":""}